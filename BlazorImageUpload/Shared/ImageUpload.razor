@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject MediatR.IMediator Mediator

<EditForm OnSubmit="@OnSubmit" EditContext="@_editContext">
    <MudGrid>

        @if (!string.IsNullOrWhiteSpace(_formModel.PreviewUrl))
        {
            <MudItem xs="12">
                <img src="@_formModel.PreviewUrl" />
            </MudItem>
        }
        <MudItem xs="12">
            <InputFile id="inputImage" OnChange="OnImageChanged" hidden accept=".jpg, .jpeg, .png" />
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.Image"
                       for="inputImage">
                Select Image
            </MudButton>
        </MudItem>

        <MudItem xs="12" Class="my-4">
            @if (_formStatus != FormStatus.Processing)
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Submit</MudButton>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            }
        </MudItem>

        @if (_formStatus == FormStatus.Failed)
        {
            <MudAlert Severity="Severity.Error">An error has occurred while saving. Please try again later.</MudAlert>
        }
        else if (_formStatus == FormStatus.Successful)
        {
            <MudAlert Severity="Severity.Success">Image saved!</MudAlert>
        }

        <MudItem xs="12" Class="my-4">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private ImageUploadFormModel _formModel;
    private EditContext _editContext;
    private FormStatus _formStatus = FormStatus.None;

    private const int MaxImageUploadSizeMB = 1;
    private const int MaxImageUploadSize = MaxImageUploadSizeMB * 1000000; //in bytes

    protected override async Task OnInitializedAsync()
    {
        _formModel = new();
        _editContext = new(_formModel);
    }

    private async Task OnImageChanged(InputFileChangeEventArgs e)
    {
        _formModel.ImageFile = null;
        _formModel.ImageFileData = null;
        _formModel.PreviewUrl = null;

        if (e?.File is null)
            return;

        if (e.File.Size > MaxImageUploadSize)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"please don't exceed {MaxImageUploadSize / 1000000} MB", Severity.Error);
            return;
        }

        _formModel.ImageFile = await e.File.RequestImageFileAsync("image/jpeg", 200, 200);
        if (_formModel.ImageFile is null)
            return;

        await using var imageStream = _formModel.ImageFile.OpenReadStream();
        _formModel.ImageFileData = new byte[_formModel.ImageFile.Size];
        await imageStream.ReadAsync(_formModel.ImageFileData);

        _formModel.PreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(_formModel.ImageFileData)}";
    }

    private async Task OnSubmit()
    {
        if (!_editContext.Validate())
        {
            _formStatus = FormStatus.None;
            return;
        }

        _formStatus = FormStatus.Processing;
        await this.InvokeAsync(StateHasChanged);

        var command = new Commands.UploadImage(Guid.NewGuid(), _formModel.ImageFileData);
        await this.Mediator.Send(command);

        _formStatus = FormStatus.Successful;
    }

    public class ImageUploadFormModel
    {
        public IBrowserFile ImageFile { get; set; }
        public string PreviewUrl { get; set; }

        [Required]
        public byte[] ImageFileData { get; set; }
    }
}