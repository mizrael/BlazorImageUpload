@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject MediatR.IMediator Mediator

<EditForm OnSubmit="@OnSubmit" EditContext="@_editContext">
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudText>Max file size (MB)</MudText>
            <MudNumericField Placeholder="Max file size (MB)" @bind-Value="_formModel.MaxFileSize"></MudNumericField>
        </MudItem>

        <MudItem xs="12" md="4">
            <InputFile id="inputFile" hidden OnChange="OnFileChanged" />
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.AttachFile"
                       for="inputFile">
                Select File
            </MudButton>
        </MudItem>

        @if(_formModel.File is not null){
            <MudItem xs="12" md="4">
                <MudText>Filename: @_formModel.File.Name</MudText>        
            </MudItem>
        }else{
            <MudItem xs="12" md="4">
                <MudText>no file selected.</MudText>        
            </MudItem>
        }

        <MudItem xs="12" Class="my-4">
            @if (_formStatus != FormStatus.Processing)
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true">Submit</MudButton>
            }
            else
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            }
        </MudItem>

        @if (_formStatus == FormStatus.Failed)
        {
            <MudAlert Severity="Severity.Error">An error has occurred while saving. Please try again later.</MudAlert>
        }
        else if (_formStatus == FormStatus.Successful)
        {
            <MudAlert Severity="Severity.Success">File saved!</MudAlert>
        }

        <MudItem xs="12" Class="my-4">
            <DataAnnotationsValidator />
            <ValidationSummary />
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private FileUploadFormModel _formModel;
    private EditContext _editContext;
    private FormStatus _formStatus = FormStatus.None;

    protected override async Task OnInitializedAsync()
    {
        _formModel = new();
        _editContext = new(_formModel);
    }

    private async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        _formModel.File = null;

        if (e?.File is null)
            return;

        if (e.File.Size / 1000000 > _formModel.MaxFileSize)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add($"please don't exceed {_formModel.MaxFileSize} MB", Severity.Error);
            return;
        }

        _formModel.File = e.File;
    }

    private async Task OnSubmit()
    {
        if (!_editContext.Validate())
        {
            _formStatus = FormStatus.None;
            return;
        }

        _formStatus = FormStatus.Processing;
        await this.InvokeAsync(StateHasChanged);

        var allowedSize = (long)_formModel.MaxFileSize * 1000000;
        using var stream = _formModel.File.OpenReadStream(allowedSize);

        var command = new Commands.UploadFile(Guid.NewGuid(), stream);
        await this.Mediator.Send(command);

        _formStatus = FormStatus.Successful;
    }

    public class FileUploadFormModel
    {
        [Required]
        public IBrowserFile File { get; set; }

        public int MaxFileSize {get;set;} = 1;
    }
}